/*
 * header.h
 *
 *  Created on: Dec 3, 2015
 *      Author: nandyhsu
 */

#ifndef HEADER_H_
#define HEADER_H_
#define TABLE_SIZE  1024
#define fs 16000.0
#define TEST_SIZE	8
#define REF_V 0.00005
#define START_GAIN 0.00001
#define NUM_SEC 4

Uint8 top [128];
Uint8 bottom [128];

//sine table with 1024 entries
Int16 sinetable[TABLE_SIZE] = {
		0,201,402,603,804,1005,1206,1407,
		1608,1809,2009,2210,2410,2611,2811,3012,
		3212,3412,3612,3811,4011,4210,4410,4609,
		4808,5007,5205,5404,5602,5800,5998,6195,
		6393,6590,6786,6983,7179,7375,7571,7767,
		7962,8157,8351,8545,8739,8933,9126,9319,
		9512,9704,9896,10087,10278,10469,10659,10849,
		11039,11228,11417,11605,11793,11980,12167,12353,
		12539,12725,12910,13094,13279,13462,13645,13828,
		14010,14191,14372,14553,14732,14912,15090,15269,
		15446,15623,15800,15976,16151,16325,16499,16673,
		16846,17018,17189,17360,17530,17700,17869,18037,
		18204,18371,18537,18703,18868,19032,19195,19357,
		19519,19680,19841,20000,20159,20317,20475,20631,
		20787,20942,21096,21250,21403,21554,21705,21856,
		22005,22154,22301,22448,22594,22739,22884,23027,
		23170,23311,23452,23592,23731,23870,24007,24143,
		24279,24413,24547,24680,24811,24942,25072,25201,
		25329,25456,25582,25708,25832,25955,26077,26198,
		26319,26438,26556,26674,26790,26905,27019,27133,
		27245,27356,27466,27575,27683,27790,27896,28001,
		28105,28208,28310,28411,28510,28609,28706,28803,
		28898,28992,29085,29177,29268,29358,29447,29534,
		29621,29706,29791,29874,29956,30037,30117,30195,
		30273,30349,30424,30498,30571,30643,30714,30783,
		30852,30919,30985,31050,31113,31176,31237,31297,
		31356,31414,31470,31526,31580,31633,31685,31736,
		31785,31833,31880,31926,31971,32014,32057,32098,
		32137,32176,32213,32250,32285,32318,32351,32382,
		32412,32441,32469,32495,32521,32545,32567,32589,
		32609,32628,32646,32663,32678,32692,32705,32717,
		32728,32737,32745,32752,32757,32761,32765,32766,
		32767,32766,32765,32761,32757,32752,32745,32737,
		32728,32717,32705,32692,32678,32663,32646,32628,
		32609,32589,32567,32545,32521,32495,32469,32441,
		32412,32382,32351,32318,32285,32250,32213,32176,
		32137,32098,32057,32014,31971,31926,31880,31833,
		31785,31736,31685,31633,31580,31526,31470,31414,
		31356,31297,31237,31176,31113,31050,30985,30919,
		30852,30783,30714,30643,30571,30498,30424,30349,
		30273,30195,30117,30037,29956,29874,29791,29706,
		29621,29534,29447,29358,29268,29177,29085,28992,
		28898,28803,28706,28609,28510,28411,28310,28208,
		28105,28001,27896,27790,27683,27575,27466,27356,
		27245,27133,27019,26905,26790,26674,26556,26438,
		26319,26198,26077,25955,25832,25708,25582,25456,
		25329,25201,25072,24942,24811,24680,24547,24413,
		24279,24143,24007,23870,23731,23592,23452,23311,
		23170,23027,22884,22739,22594,22448,22301,22154,
		22005,21856,21705,21554,21403,21250,21096,20942,
		20787,20631,20475,20317,20159,20000,19841,19680,
		19519,19357,19195,19032,18868,18703,18537,18371,
		18204,18037,17869,17700,17530,17360,17189,17018,
		16846,16673,16499,16325,16151,15976,15800,15623,
		15446,15269,15090,14912,14732,14553,14372,14191,
		14010,13828,13645,13462,13279,13094,12910,12725,
		12539,12353,12167,11980,11793,11605,11417,11228,
		11039,10849,10659,10469,10278,10087,9896,9704,
		9512,9319,9126,8933,8739,8545,8351,8157,
		7962,7767,7571,7375,7179,6983,6786,6590,
		6393,6195,5998,5800,5602,5404,5205,5007,
		4808,4609,4410,4210,4011,3811,3612,3412,
		3212,3012,2811,2611,2410,2210,2009,1809,
		1608,1407,1206,1005,804,603,402,201,
		0,-201,-402,-603,-804,-1005,-1206,-1407,
		-1608,-1809,-2009,-2210,-2410,-2611,-2811,-3012,
		-3212,-3412,-3612,-3811,-4011,-4210,-4410,-4609,
		-4808,-5007,-5205,-5404,-5602,-5800,-5998,-6195,
		-6393,-6590,-6786,-6983,-7179,-7375,-7571,-7767,
		-7962,-8157,-8351,-8545,-8739,-8933,-9126,-9319,
		-9512,-9704,-9896,-10087,-10278,-10469,-10659,-10849,
		-11039,-11228,-11417,-11605,-11793,-11980,-12167,-12353,
		-12539,-12725,-12910,-13094,-13279,-13462,-13645,-13828,
		-14010,-14191,-14372,-14553,-14732,-14912,-15090,-15269,
		-15446,-15623,-15800,-15976,-16151,-16325,-16499,-16673,
		-16846,-17018,-17189,-17360,-17530,-17700,-17869,-18037,
		-18204,-18371,-18537,-18703,-18868,-19032,-19195,-19357,
		-19519,-19680,-19841,-20000,-20159,-20317,-20475,-20631,
		-20787,-20942,-21096,-21250,-21403,-21554,-21705,-21856,
		-22005,-22154,-22301,-22448,-22594,-22739,-22884,-23027,
		-23170,-23311,-23452,-23592,-23731,-23870,-24007,-24143,
		-24279,-24413,-24547,-24680,-24811,-24942,-25072,-25201,
		-25329,-25456,-25582,-25708,-25832,-25955,-26077,-26198,
		-26319,-26438,-26556,-26674,-26790,-26905,-27019,-27133,
		-27245,-27356,-27466,-27575,-27683,-27790,-27896,-28001,
		-28105,-28208,-28310,-28411,-28510,-28609,-28706,-28803,
		-28898,-28992,-29085,-29177,-29268,-29358,-29447,-29534,
		-29621,-29706,-29791,-29874,-29956,-30037,-30117,-30195,
		-30273,-30349,-30424,-30498,-30571,-30643,-30714,-30783,
		-30852,-30919,-30985,-31050,-31113,-31176,-31237,-31297,
		-31356,-31414,-31470,-31526,-31580,-31633,-31685,-31736,
		-31785,-31833,-31880,-31926,-31971,-32014,-32057,-32098,
		-32137,-32176,-32213,-32250,-32285,-32318,-32351,-32382,
		-32412,-32441,-32469,-32495,-32521,-32545,-32567,-32589,
		-32609,-32628,-32646,-32663,-32678,-32692,-32705,-32717,
		-32728,-32737,-32745,-32752,-32757,-32761,-32765,-32766,
		-32767,-32766,-32765,-32761,-32757,-32752,-32745,-32737,
		-32728,-32717,-32705,-32692,-32678,-32663,-32646,-32628,
		-32609,-32589,-32567,-32545,-32521,-32495,-32469,-32441,
		-32412,-32382,-32351,-32318,-32285,-32250,-32213,-32176,
		-32137,-32098,-32057,-32014,-31971,-31926,-31880,-31833,
		-31785,-31736,-31685,-31633,-31580,-31526,-31470,-31414,
		-31356,-31297,-31237,-31176,-31113,-31050,-30985,-30919,
		-30852,-30783,-30714,-30643,-30571,-30498,-30424,-30349,
		-30273,-30195,-30117,-30037,-29956,-29874,-29791,-29706,
		-29621,-29534,-29447,-29358,-29268,-29177,-29085,-28992,
		-28898,-28803,-28706,-28609,-28510,-28411,-28310,-28208,
		-28105,-28001,-27896,-27790,-27683,-27575,-27466,-27356,
		-27245,-27133,-27019,-26905,-26790,-26674,-26556,-26438,
		-26319,-26198,-26077,-25955,-25832,-25708,-25582,-25456,
		-25329,-25201,-25072,-24942,-24811,-24680,-24547,-24413,
		-24279,-24143,-24007,-23870,-23731,-23592,-23452,-23311,
		-23170,-23027,-22884,-22739,-22594,-22448,-22301,-22154,
		-22005,-21856,-21705,-21554,-21403,-21250,-21096,-20942,
		-20787,-20631,-20475,-20317,-20159,-20000,-19841,-19680,
		-19519,-19357,-19195,-19032,-18868,-18703,-18537,-18371,
		-18204,-18037,-17869,-17700,-17530,-17360,-17189,-17018,
		-16846,-16673,-16499,-16325,-16151,-15976,-15800,-15623,
		-15446,-15269,-15090,-14912,-14732,-14553,-14372,-14191,
		-14010,-13828,-13645,-13462,-13279,-13094,-12910,-12725,
		-12539,-12353,-12167,-11980,-11793,-11605,-11417,-11228,
		-11039,-10849,-10659,-10469,-10278,-10087,-9896,-9704,
		-9512,-9319,-9126,-8933,-8739,-8545,-8351,-8157,
		-7962,-7767,-7571,-7375,-7179,-6983,-6786,-6590,
		-6393,-6195,-5998,-5800,-5602,-5404,-5205,-5007,
		-4808,-4609,-4410,-4210,-4011,-3811,-3612,-3412,
		-3212,-3012,-2811,-2611,-2410,-2210,-2009,-1809,
		-1608,-1407,-1206,-1005,-804,-603,-402,-201
};

// Print "Left test: xxxxHz"
void left_test(){
				top[35] = 0x7F; // L
				top[36] = 0x40;
				top[37] = 0x40;
				top[38] = 0x40;
				top[39] = 0x00;

				top[40] = 0x38; // e
				top[41] = 0x54;
				top[42] = 0x54;
				top[43] = 0x54;
				top[44] = 0x18;

				top[45] = 0x00; // f
				top[46] = 0x08;
				top[47] = 0x7E;
				top[48] = 0x09;
				top[49] = 0x02;

				top[50] = 0x04; // t
				top[51] = 0x04;
				top[52] = 0x3F;
				top[53] = 0x44;
				top[54] = 0x24;

				top[55] = 0x00; // (space)
				top[56] = 0x00;
				top[57] = 0x00;
				top[58] = 0x00;
				top[59] = 0x00;

				top[60] = 0x38; // e
				top[61] = 0x54;
				top[62] = 0x54;
				top[63] = 0x54;
				top[64] = 0x18;

				top[65] = 0x20; // a
				top[66] = 0x54;
				top[67] = 0x54;
				top[68] = 0x78;
				top[69] = 0x40;

				top[70] = 0x7C; // r
				top[71] = 0x08;
				top[72] = 0x04;
				top[73] = 0x04;
				top[74] = 0x08;

				top[75] = 0x00; // :
				top[76] = 0x00;
				top[77] = 0x14;
				top[78] = 0x00;
				top[79] = 0x00;

				top[80] = 0x00; // (space)
				top[81] = 0x00;
				top[82] = 0x00;
				top[83] = 0x00;
				top[84] = 0x00;
}

void L_1000_HZ(){
	top[85] = 0x00; // 1
					top[86] = 0x42;
					top[87] = 0x7F;
					top[88] = 0x40;
					top[89] = 0x00;

					top[90] = 0x3E; // 0
					top[91] = 0x51;
					top[92] = 0x49;
					top[93] = 0x45;
					top[94] = 0x3E;

					top[95] = 0x3E; // 0
					top[96] = 0x51;
					top[97] = 0x49;
					top[98] = 0x45;
					top[99] = 0x3E;

					top[100] = 0x3E; // 0
					top[101] = 0x51;
					top[102] = 0x49;
					top[103] = 0x45;
					top[104] = 0x3E;

					top[105] = 0x00; // (space)
					top[106] = 0x00;
					top[107] = 0x00;
					top[108] = 0x00;
					top[109] = 0x00;

					top[110] = 0x7F; // H
					top[111] = 0x04;
					top[112] = 0x04;
					top[113] = 0x04;
					top[114] = 0x7F;

					top[115] = 0x44; // z
					top[116] = 0x64;
					top[117] = 0x54;
					top[118] = 0x4C;
					top[119] = 0x44;
}

void L_2000_HZ(){
	top[85] = 0x72; // 2
	top[86] = 0x49;
	top[87] = 0x49;
	top[88] = 0x49;
	top[89] = 0x46;

}

void L_3000_HZ(){
	top[85] = 0x21; // 3
	top[86] = 0x41;
	top[87] = 0x49;
	top[88] = 0x4D;
	top[89] = 0x33;
}

void L_3750_HZ(){
	top[90] = 0x41; // 7
	top[91] = 0x21;
	top[92] = 0x11;
	top[93] = 0x09;
	top[94] = 0x07;

	top[95] = 0x27; // 5
	top[96] = 0x45;
	top[97] = 0x45;
	top[98] = 0x45;
	top[99] = 0x39;
}

void L_4250_HZ(){
	top[85] = 0x18; // 4
	top[86] = 0x14;
	top[87] = 0x12;
	top[88] = 0x7F;
	top[89] = 0x10;

	top[90] = 0x72; // 2
	top[91] = 0x49;
	top[92] = 0x49;
	top[93] = 0x49;
	top[94] = 0x46;

	top[95] = 0x27; // 5
	top[96] = 0x45;
	top[97] = 0x45;
	top[98] = 0x45;
	top[99] = 0x39;

}

void L_5000_HZ(){
	top[85] = 0x27; // 5
	top[86] = 0x45;
	top[87] = 0x45;
	top[88] = 0x45;
	top[89] = 0x39;

	top[90] = 0x3E; // 0
	top[91] = 0x51;
	top[92] = 0x49;
	top[93] = 0x45;
	top[94] = 0x3E;

	top[95] = 0x3E; // 0
	top[96] = 0x51;
	top[97] = 0x49;
	top[98] = 0x45;
	top[99] = 0x3E;

}

void L_6000_HZ(){

	top[85] = 0x3C; // 6
	top[86] = 0x4A;
	top[87] = 0x49;
	top[88] = 0x49;
	top[89] = 0x31;
}
void L_7000_HZ(){
	top[85] = 0x41; // 7
	top[86] = 0x21;
	top[87] = 0x11;
	top[88] = 0x09;
	top[89] = 0x07;
}

void right_test(){
	// Print "Right test: xxxxHz"
	top[35] = 0x7F; // R
	top[36] = 0x09;
	top[37] = 0x09;
	top[38] = 0x19;
	top[39] = 0x2E;

	top[40] = 0x00; // i
	top[41] = 0x44;
	top[42] = 0x7D;
	top[43] = 0x40;
	top[44] = 0x00;

	top[45] = 0x18; // g
	top[46] = 0xA4;
	top[47] = 0xA4;
	top[48] = 0x9C;
	top[49] = 0x78;

	top[50] = 0x7F; // h
	top[51] = 0x08;
	top[52] = 0x04;
	top[53] = 0x04;
	top[54] = 0x78;

	top[55] = 0x04; // t
	top[56] = 0x04;
	top[57] = 0x3F;
	top[58] = 0x44;
	top[59] = 0x24;

	top[60] = 0x00; // (space)
	top[61] = 0x00;
	top[62] = 0x00;
	top[63] = 0x00;
	top[64] = 0x00;

	top[65] = 0x38; // e
	top[66] = 0x54;
	top[67] = 0x54;
	top[68] = 0x54;
	top[69] = 0x18;

	top[70] = 0x20; // a
	top[71] = 0x54;
	top[72] = 0x54;
	top[73] = 0x78;
	top[74] = 0x40;

	top[75] = 0x7C; // r
	top[76] = 0x08;
	top[77] = 0x04;
	top[78] = 0x04;
	top[79] = 0x08;

	top[80] = 0x00; // :
	top[81] = 0x00;
	top[82] = 0x14;
	top[83] = 0x00;
	top[84] = 0x00;

	top[85] = 0x00; // (space)
	top[86] = 0x00;
	top[87] = 0x00;
	top[88] = 0x00;
	top[89] = 0x00;

}

void R_1000_HZ(){
	top[90] = 0x00; // 1
	top[91] = 0x42;
	top[92] = 0x7F;
	top[93] = 0x40;
	top[94] = 0x00;

	top[95] = 0x3E; // 0
	top[96] = 0x51;
	top[97] = 0x49;
	top[98] = 0x45;
	top[99] = 0x3E;

	top[100] = 0x3E; // 0
	top[101] = 0x51;
	top[102] = 0x49;
	top[103] = 0x45;
	top[104] = 0x3E;

	top[105] = 0x3E; // 0
	top[106] = 0x51;
	top[107] = 0x49;
	top[108] = 0x45;
	top[109] = 0x3E;

	top[110] = 0x00; // (space)
	top[111] = 0x00;
	top[112] = 0x00;
	top[113] = 0x00;
	top[114] = 0x00;

	top[115] = 0x7F; // H
	top[116] = 0x08;
	top[117] = 0x08;
	top[118] = 0x08;
	top[119] = 0x7F;

	top[120] = 0x44; // z
	top[121] = 0x64;
	top[122] = 0x54;
	top[123] = 0x4C;
	top[124] = 0x44;


}

void R_2000_HZ(){
	top[90] = 0x72; // 2
	top[91] = 0x49;
	top[92] = 0x49;
	top[93] = 0x49;
	top[94] = 0x46;

}

void R_3000_HZ(){
	top[90] = 0x21; // 3
	top[91] = 0x41;
	top[92] = 0x49;
	top[93] = 0x4D;
	top[94] = 0x33;
}

void R_3750_HZ(){
	top[95] = 0x41; // 7
	top[96] = 0x21;
	top[97] = 0x11;
	top[98] = 0x09;
	top[99] = 0x07;

	top[100] = 0x27; // 5
	top[101] = 0x45;
	top[102] = 0x45;
	top[103] = 0x45;
	top[104] = 0x39;
}

void R_4250_HZ(){

	top[90] = 0x18; // 4
	top[91] = 0x14;
	top[92] = 0x12;
	top[93] = 0x7F;
	top[94] = 0x10;

	top[95] = 0x72; // 2
	top[96] = 0x49;
	top[97] = 0x49;
	top[98] = 0x49;
	top[99] = 0x46;

	top[100] = 0x27; // 5
	top[101] = 0x45;
	top[102] = 0x45;
	top[103] = 0x45;
	top[104] = 0x39;
}

void R_5000_HZ(){

	top[90] = 0x27; // 5
	top[91] = 0x45;
	top[92] = 0x45;
	top[93] = 0x45;
	top[94] = 0x39;

	top[95] = 0x3E; // 0
	top[96] = 0x51;
	top[97] = 0x49;
	top[98] = 0x45;
	top[99] = 0x3E;

	top[100] = 0x3E; // 0
	top[101] = 0x51;
	top[102] = 0x49;
	top[103] = 0x45;
	top[104] = 0x3E;
}

void R_6000_HZ(){
	top[90] = 0x3C; // 6
	top[91] = 0x4A;
	top[92] = 0x49;
	top[93] = 0x49;
	top[94] = 0x31;
}

void R_7000_HZ(){
	top[90] = 0x41; // 7
	top[91] = 0x21;
	top[92] = 0x11;
	top[93] = 0x09;
	top[94] = 0x07;

}

//prints LEDS to screen
void print_screen(){
	Uint16 j;
	OSD9616_send(0x00,0x00);
	OSD9616_send(0x00,0x10);
	OSD9616_send(0x00,0xb0);   // Set page for page pointer to page 0
	for(j=0; j<128; j++)
	{
		OSD9616_send(0x40, top[j]); // Writes the top page
	}
	OSD9616_send(0x00,0x00);
	OSD9616_send(0x00,0x10);
	OSD9616_send(0x00,0xb1);   // Set page for page pointer to page 1
	for(j=0; j<128; j++)
	{
		OSD9616_send(0x40, bottom[j]);// Writes the bottom page
	}
}

//clears LCD screen
void clear_screen(){
	Uint16 i;
	for(i = 0; i<128; i++)
	{
		top[i] = 0x00;
		bottom[i] = 0x00;
	}
	
}

// Print "Done"
void print_done(){
	top[35] = 0x7E; // D
	top[36] = 0x42;
	top[37] = 0x42;
	top[38] = 0x42;
	top[39] = 0x1C;

	top[40] = 0x38; // o
	top[41] = 0x44;
	top[42] = 0x44;
	top[43] = 0x44;
	top[44] = 0x38;

	top[45] = 0x7C; // n
	top[46] = 0x08;
	top[47] = 0x04;
	top[48] = 0x04;
	top[49] = 0x78;

	top[50] = 0x38; // e
	top[51] = 0x54;
	top[52] = 0x54;
	top[53] = 0x54;
	top[54] = 0x18;
}

#endif /* HEADER_H_ */
